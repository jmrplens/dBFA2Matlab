function [ID,Res,Pos,Medidas,Comment] = LeerTXTdBFAHorizontal(TXT)

% Primero crea una copia temporal del txt cambiando las comas por puntos
arreglar(TXT);

% Extraer los datos brutos
datos = extraer(strcat(TXT,'_temp'));
% Elimina el archivo temporal
delete(strcat(TXT,'_temp'));

% Obtener el numero de columna de cada medida
IndiceID = find(~cellfun(@isempty,datos(1,2:end)))+1;

% Obtener una lista de la ID de cada medida
ID = str2double(string(datos(1,IndiceID)))';
% Obtener comentarios
Comment = str2double(string(datos(3,IndiceID)))';
% Obtener distancia entre muestras de cada medida (resolucion)
Res = str2double(string(datos(12,IndiceID)))';
% Obtener una lista de  nombres de las posiciones de cada medida
Pos = string(datos(15,IndiceID))';
% Obtener los datos de medida
Medidas = cell(size(ID));
for i=1:numel(ID)
Medidas{i} = str2doubleq(datos(28:end,IndiceID(i):IndiceID(i)+6));
%Medidas{i}(Medidas{i}==0) = NaN;
%Medidas{i} = fillmissing(Medidas{i},'linear','EndValues','extrap');
end

end

function arreglar(TXT)

% Lee el archivo TXT
fid  = fopen(TXT,'r');
% Guarda el contenido en la variable f
f=fread(fid,'*char')';
fclose(fid);
% Reemplaza las comas por puntos
f = strrep(f,',','.');
% Crea el archivo temporal
fid  = fopen(strcat(TXT,'_temp'),'w');
% Guarda el contenido modificado en el archivo temporal
fprintf(fid,'%s',f);
% Cierra el archivo
fclose(fid);

end

function VaciaAur = extraer(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   VACIAAUR = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   VACIAAUR = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   VaciaAur = importfile('VaciaAur.txt', 1, 2477);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/08/31 23:37:06

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: text (%s)
%   column5: text (%s)
%	column6: text (%s)
%   column7: text (%s)
%	column8: text (%s)
%   column9: text (%s)
%	column10: text (%s)
%   column11: text (%s)
%	column12: text (%s)
%   column13: text (%s)
%	column14: text (%s)
%   column15: text (%s)
%	column16: text (%s)
%   column17: text (%s)
%	column18: text (%s)
%   column19: text (%s)
%	column20: text (%s)
%   column21: text (%s)
%	column22: text (%s)
%   column23: text (%s)
%	column24: text (%s)
%   column25: text (%s)
%	column26: text (%s)
%   column27: text (%s)
%	column28: text (%s)
%   column29: text (%s)
%	column30: text (%s)
%   column31: text (%s)
%	column32: text (%s)
%   column33: text (%s)
%	column34: text (%s)
%   column35: text (%s)
%	column36: text (%s)
%   column37: text (%s)
%	column38: text (%s)
%   column39: text (%s)
%	column40: text (%s)
%   column41: text (%s)
%	column42: text (%s)
%   column43: text (%s)
%	column44: text (%s)
%   column45: text (%s)
%	column46: text (%s)
%   column47: text (%s)
%	column48: text (%s)
%   column49: text (%s)
%	column50: text (%s)
%   column51: text (%s)
%	column52: text (%s)
%   column53: text (%s)
%	column54: text (%s)
%   column55: text (%s)
%	column56: text (%s)
%   column57: text (%s)
%	column58: text (%s)
%   column59: text (%s)
%	column60: text (%s)
%   column61: text (%s)
%	column62: text (%s)
%   column63: text (%s)
%	column64: text (%s)
%   column65: text (%s)
%	column66: text (%s)
%   column67: text (%s)
%	column68: text (%s)
%   column69: text (%s)
%	column70: text (%s)
%   column71: text (%s)
%	column72: text (%s)
%   column73: text (%s)
%	column74: text (%s)
%   column75: text (%s)
%	column76: text (%s)
%   column77: text (%s)
%	column78: text (%s)
%   column79: text (%s)
%	column80: text (%s)
%   column81: text (%s)
%	column82: text (%s)
%   column83: text (%s)
%	column84: text (%s)
%   column85: text (%s)
%	column86: text (%s)
%   column87: text (%s)
%	column88: text (%s)
%   column89: text (%s)
%	column90: text (%s)
%   column91: text (%s)
%	column92: text (%s)
%   column93: text (%s)
%	column94: text (%s)
%   column95: text (%s)
%	column96: text (%s)
%   column97: text (%s)
%	column98: text (%s)
%   column99: text (%s)
%	column100: text (%s)
%   column101: text (%s)
%	column102: text (%s)
%   column103: text (%s)
%	column104: text (%s)
%   column105: text (%s)
%	column106: text (%s)
%   column107: text (%s)
%	column108: text (%s)
%   column109: text (%s)
%	column110: text (%s)
%   column111: text (%s)
%	column112: text (%s)
%   column113: text (%s)
%	column114: text (%s)
%   column115: text (%s)
%	column116: text (%s)
%   column117: text (%s)
%	column118: text (%s)
%   column119: text (%s)
%	column120: text (%s)
%   column121: text (%s)
%	column122: text (%s)
%   column123: text (%s)
%	column124: text (%s)
%   column125: text (%s)
%	column126: text (%s)
%   column127: text (%s)
%	column128: text (%s)
%   column129: text (%s)
%	column130: text (%s)
%   column131: text (%s)
%	column132: text (%s)
%   column133: text (%s)
%	column134: text (%s)
%   column135: text (%s)
%	column136: text (%s)
%   column137: text (%s)
%	column138: text (%s)
%   column139: text (%s)
%	column140: text (%s)
%   column141: text (%s)
%	column142: text (%s)
%   column143: text (%s)
%	column144: text (%s)
%   column145: text (%s)
%	column146: text (%s)
%   column147: text (%s)
%	column148: text (%s)
%   column149: text (%s)
%	column150: text (%s)
%   column151: text (%s)
%	column152: text (%s)
%   column153: text (%s)
%	column154: text (%s)
%   column155: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this code. If
% an error occurs for a different file, try regenerating the code from the
% Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for unimportable
% data, select unimportable cells in a file and regenerate the script.

%% Create output variable
VaciaAur = [dataArray{1:end-1}];
end